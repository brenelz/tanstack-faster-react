/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import type { FileRoutesByPath, CreateFileRoute } from '@tanstack/react-router'
import { Route as rootRoute } from './routes/__root'
import { Route as CartRouteImport } from './routes/cart'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductsProductRouteImport } from './routes/products.$product'
import { Route as CategoriesCategoryRouteImport } from './routes/categories.$category'

// Create/Update Routes

const CartRoute = CartRouteImport.update({
  id: '/cart',
  path: '/cart',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ProductsProductRoute = ProductsProductRouteImport.update({
  id: '/products/$product',
  path: '/products/$product',
  getParentRoute: () => rootRoute,
} as any)

const CategoriesCategoryRoute = CategoriesCategoryRouteImport.update({
  id: '/categories/$category',
  path: '/categories/$category',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRoute
    }
    '/cart': {
      id: '/cart'
      path: '/cart'
      fullPath: '/cart'
      preLoaderRoute: typeof CartRouteImport
      parentRoute: typeof rootRoute
    }
    '/categories/$category': {
      id: '/categories/$category'
      path: '/categories/$category'
      fullPath: '/categories/$category'
      preLoaderRoute: typeof CategoriesCategoryRouteImport
      parentRoute: typeof rootRoute
    }
    '/products/$product': {
      id: '/products/$product'
      path: '/products/$product'
      fullPath: '/products/$product'
      preLoaderRoute: typeof ProductsProductRouteImport
      parentRoute: typeof rootRoute
    }
  }
}

// Add type-safety to the createFileRoute function across the route tree

declare module './routes/index' {
  const createFileRoute: CreateFileRoute<
    '/',
    FileRoutesByPath['/']['parentRoute'],
    FileRoutesByPath['/']['id'],
    FileRoutesByPath['/']['path'],
    FileRoutesByPath['/']['fullPath']
  >
}
declare module './routes/cart' {
  const createFileRoute: CreateFileRoute<
    '/cart',
    FileRoutesByPath['/cart']['parentRoute'],
    FileRoutesByPath['/cart']['id'],
    FileRoutesByPath['/cart']['path'],
    FileRoutesByPath['/cart']['fullPath']
  >
}
declare module './routes/categories.$category' {
  const createFileRoute: CreateFileRoute<
    '/categories/$category',
    FileRoutesByPath['/categories/$category']['parentRoute'],
    FileRoutesByPath['/categories/$category']['id'],
    FileRoutesByPath['/categories/$category']['path'],
    FileRoutesByPath['/categories/$category']['fullPath']
  >
}
declare module './routes/products.$product' {
  const createFileRoute: CreateFileRoute<
    '/products/$product',
    FileRoutesByPath['/products/$product']['parentRoute'],
    FileRoutesByPath['/products/$product']['id'],
    FileRoutesByPath['/products/$product']['path'],
    FileRoutesByPath['/products/$product']['fullPath']
  >
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/categories/$category': typeof CategoriesCategoryRoute
  '/products/$product': typeof ProductsProductRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/categories/$category': typeof CategoriesCategoryRoute
  '/products/$product': typeof ProductsProductRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/cart': typeof CartRoute
  '/categories/$category': typeof CategoriesCategoryRoute
  '/products/$product': typeof ProductsProductRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/cart' | '/categories/$category' | '/products/$product'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/cart' | '/categories/$category' | '/products/$product'
  id:
    | '__root__'
    | '/'
    | '/cart'
    | '/categories/$category'
    | '/products/$product'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CartRoute: typeof CartRoute
  CategoriesCategoryRoute: typeof CategoriesCategoryRoute
  ProductsProductRoute: typeof ProductsProductRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CartRoute: CartRoute,
  CategoriesCategoryRoute: CategoriesCategoryRoute,
  ProductsProductRoute: ProductsProductRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

// @ts-ignore
import type * as ServerTypes from '../.tanstack-start/server-routes/routeTree.gen.ts'

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/cart",
        "/categories/$category",
        "/products/$product"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/cart": {
      "filePath": "cart.tsx"
    },
    "/categories/$category": {
      "filePath": "categories.$category.tsx"
    },
    "/products/$product": {
      "filePath": "products.$product.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
